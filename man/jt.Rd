% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_jt.R
\name{jt}
\alias{jt}
\alias{jt.charge}
\title{Junction Tree}
\usage{
jt(x, evidence = NULL, flow = "sum", propagate = "full")

\method{jt}{charge}(x, evidence = NULL, flow = "sum", propagate = "full")
}
\arguments{
\item{x}{An object return from \code{compile}}

\item{evidence}{A named vector. The names are the variabes and the elements are the evidence}

\item{flow}{Either "sum" or "max"}

\item{propagate}{Either "no", "collect" or "full".}
}
\value{
A \code{jt} object
}
\description{
Construction of a junction tree and message passing
}
\examples{

# Setting up the network
# ----------------------

library(igraph)
el <- matrix(c(
"A", "T",
"T", "E",
"S", "L",
"S", "B",
"L", "E",
"E", "X",
"E", "D",
"B", "D"),
 nc = 2,
 byrow = TRUE
)

g <- igraph::graph_from_edgelist(el)
plot(g)
# -----------------------

# Data
# ----
# We use the asia data; see the man page (?asia)

# Compilation
# -----------
cp <- compile(asia, g)

# Example 1: sum-flow without evidence
# ------------------------------------
jt1 <- jt(cp)
plot(jt1)
print(jt1)
query_belief(jt1, c("E", "L", "T"))
query_belief(jt1, c("B", "D", "E"), type = "joint")

# Example 2: sum-flow with evidence
# ---------------------------------
e2  <- c(A = "y", X = "n")
jt2 <- jt(cp, e2) 
query_belief(jt2, c("E", "L", "T"))
query_belief(jt2, c("B", "D", "E"), type = "joint")

# Notice that, the configuration (D,E,B) = (y,y,n) has changed
# dramatically as a consequence of the evidence

# We can get the probability of the evidence:
query_evidence(jt2)

# Example 3: max-flow without evidence
# ------------------------------------
jt3 <- jt(cp, flow = "max")
mpe(jt3)

# Example 4: max-flow with evidence
# ---------------------------------
e4  <- c(T = "y", X = "y", D = "y")
jt4 <- jt(cp, e4, flow = "max")
mpe(jt4)

# Notice, that S, T, B, E, X and D has changed from "n" to "y"
# as a consequence of the new evidence e4


# Example 5: specifying a root node and only collect to save run time
# -------------------------------------------------------------------------

# cp5 <- compile(asia, g, "X")
# jt5 <- jt(cp5, propagate = "collect")

# We can only query from the root clique now (clique 1)
# but we have ensured that the node of interest, "X", does indeed live in
# this clique

# Example 6: Compiling from a list of conditional probabilities
# -------------------------------------------------------------------------

# 1) We need a list with CPTs which we extract from the asia2 object
#    - the list must be named with child nodes
# 2) The elements need to by an array-like object with proper dimnames
# 3) The list of cpts needs to be converted into a "cpt_list" object
#    - This is merely for checking if the cpts are of the correct type,
#    - but also the cpts are now converted to a sparse representation
#      to obtain a better runtime in the compilation and propagation phase

cl  <- cpt_list(asia2)
cp6 <- compile(cl, save_graph = TRUE)

# Inspection; see if the graph correspond to the cpts
# g <- dag(cp6)
# plot(g) 

# Finally, cp6 is now of the same form as cp above and we can use the
# junction tree algorithm

jt6 <- jt(cp6)
query_belief(jt6, c("either", "smoke"))

}
\seealso{
\code{\link{query_belief}}, \code{\link{mpe}}, \code{\link{get_cliques}}
}
